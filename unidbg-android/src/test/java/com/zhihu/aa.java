package com.zhihu;

import javax.xml.bind.DatatypeConverter;
import java.util.Arrays;
import java.util.Base64;

/**
 * Created by zsk
 * on 2025/03/05 01:46
 */
public class aa {
    public static byte[] m190074a(byte[] bArr, byte[] bArr2) {
        int[] iArr = {187, 185, 186, 184, 179, 177, 178, 176, 191, 189, 190, 188, 183, 181, 182, 180, 155, 153, 154, 152, 147, 145, 146, 144, 159, 157, 158, 156, 151, 149, 150, 148, 171, 169, 170, 168, 163, 161, 162, 160, 175, 173, 174, 172, 167, 165, 166, 164, 139, 137, 138, 136, 131, 129, 130, 128, 143, 141, 142, 140, 135, 133, 134, 132, 59, 57, 58, 56, 51, 49, 50, 48, 63, 61, 62, 60, 55, 53, 54, 52, 27, 25, 26, 24, 19, 17, 18, 16, 31, 29, 30, 28, 23, 21, 22, 20, 43, 41, 42, 40, 35, 33, 34, 32, 47, 45, 46, 44, 39, 37, 38, 36, 11, 9, 10, 8, 3, 1, 2, 0, 15, 13, 14, 12, 7, 5, 6, 4, 251, 249, 250, 248, 243, 241, 242, 240, 255, 253, 254, 252, 247, 245, 246, 244, 219, 217, 218, 216, 211, 209, 210, 208, 223, 221, 222, 220, 215, 213, 214, 212, 235, 233, 234, 232, 227, 225, 226, 224, 239, 237, 238, 236, 231, 229, 230, 228, 203, 201, 202, 200, 195, 193, 194, 192, 207, 205, 206, 204, 199, 197, 198, 196, 123, 121, 122, 120, 115, 113, 114, 112, 127, 125, 126, 124, 119, 117, 118, 116, 91, 89, 90, 88, 83, 81, 82, 80, 95, 93, 94, 92, 87, 85, 86, 84, 107, 105, 106, 104, 99, 97, 98, 96, 111, 109, 110, 108, 103, 101, 102, 100, 75, 73, 74, 72, 67, 65, 66, 64, 79, 77, 78, 76, 71, 69, 70, 68};
        int[] iArr2 = {0, 2, 1, 3, 8, 10, 9, 11, 4, 6, 5, 7, 12, 14, 13, 15, 32, 34, 33, 35, 40, 42, 41, 43, 36, 38, 37, 39, 44, 46, 45, 47, 16, 18, 17, 19, 24, 26, 25, 27, 20, 22, 21, 23, 28, 30, 29, 31, 48, 50, 49, 51, 56, 58, 57, 59, 52, 54, 53, 55, 60, 62, 61, 63, 128, 130, 129, 131, 136, 138, 137, 139, 132, 134, 133, 135, 140, 142, 141, 143, 160, 162, 161, 163, 168, 170, 169, 171, 164, 166, 165, 167, 172, 174, 173, 175, 144, 146, 145, 147, 152, 154, 153, 155, 148, 150, 149, 151, 156, 158, 157, 159, 176, 178, 177, 179, 184, 186, 185, 187, 180, 182, 181, 183, 188, 190, 189, 191, 64, 66, 65, 67, 72, 74, 73, 75, 68, 70, 69, 71, 76, 78, 77, 79, 96, 98, 97, 99, 104, 106, 105, 107, 100, 102, 101, 103, 108, 110, 109, 111, 80, 82, 81, 83, 88, 90, 89, 91, 84, 86, 85, 87, 92, 94, 93, 95, 112, 114, 113, 115, 120, 122, 121, 123, 116, 118, 117, 119, 124, 126, 125, 127, 192, 194, 193, 195, 200, 202, 201, 203, 196, 198, 197, 199, 204, 206, 205, 207, 224, 226, 225, 227, 232, 234, 233, 235, 228, 230, 229, 231, 236, 238, 237, 239, 208, 210, 209, 211, 216, 218, 217, 219, 212, 214, 213, 215, 220, 222, 221, 223, 240, 242, 241, 243, 248, 250, 249, 251, 244, 246, 245, 247, 252, 254, 253, 255};
        int length = bArr.length;
        byte[] bArr3 = new byte[length];
        for (int i = 0; i < length; i++) {
            if (bArr[i] < 0) {
                bArr3[i] = (byte) iArr[bArr[i] + 256];
            } else {
                bArr3[i] = (byte) iArr[bArr[i]];
            }
        }
        if (bArr2 != null) {
            for (int i2 = 0; i2 < 16; i2++) {
                if (bArr2[i2] < 0) {
                    bArr2[i2] = (byte) iArr2[bArr2[i2] + 256];
                } else {
                    bArr2[i2] = (byte) iArr2[bArr2[i2]];
                }
            }
        }
        return bArr3;
    }

    public static byte[] m190073b(byte[] bArr) {
        int[] iArr = {0, 2, 1, 3, 8, 10, 9, 11, 4, 6, 5, 7, 12, 14, 13, 15, 32, 34, 33, 35, 40, 42, 41, 43, 36, 38, 37, 39, 44, 46, 45, 47, 16, 18, 17, 19, 24, 26, 25, 27, 20, 22, 21, 23, 28, 30, 29, 31, 48, 50, 49, 51, 56, 58, 57, 59, 52, 54, 53, 55, 60, 62, 61, 63, 128, 130, 129, 131, 136, 138, 137, 139, 132, 134, 133, 135, 140, 142, 141, 143, 160, 162, 161, 163, 168, 170, 169, 171, 164, 166, 165, 167, 172, 174, 173, 175, 144, 146, 145, 147, 152, 154, 153, 155, 148, 150, 149, 151, 156, 158, 157, 159, 176, 178, 177, 179, 184, 186, 185, 187, 180, 182, 181, 183, 188, 190, 189, 191, 64, 66, 65, 67, 72, 74, 73, 75, 68, 70, 69, 71, 76, 78, 77, 79, 96, 98, 97, 99, 104, 106, 105, 107, 100, 102, 101, 103, 108, 110, 109, 111, 80, 82, 81, 83, 88, 90, 89, 91, 84, 86, 85, 87, 92, 94, 93, 95, 112, 114, 113, 115, 120, 122, 121, 123, 116, 118, 117, 119, 124, 126, 125, 127, 192, 194, 193, 195, 200, 202, 201, 203, 196, 198, 197, 199, 204, 206, 205, 207, 224, 226, 225, 227, 232, 234, 233, 235, 228, 230, 229, 231, 236, 238, 237, 239, 208, 210, 209, 211, 216, 218, 217, 219, 212, 214, 213, 215, 220, 222, 221, 223, 240, 242, 241, 243, 248, 250, 249, 251, 244, 246, 245, 247, 252, 254, 253, 255};
        int length = bArr.length;
        byte[] bArr3 = new byte[length];
        for (int i = 0; i < length; i++) {
            if (bArr[i] < 0) {
                bArr3[i] = (byte) iArr[bArr[i] + 256];
            } else {
                bArr3[i] = (byte) iArr[bArr[i]];
            }
        }
        return bArr3;
    }

    public static String bytesToBase64(byte[] byteArray) {
        return Base64.getEncoder().encodeToString(byteArray);
    }

    public static String bytesToHex(byte[] bytes) {
        StringBuilder hexString = new StringBuilder();
        for (byte b : bytes) {
            // 将字节转换为两位的十六进制字符串
            String hex = Integer.toHexString(b & 0xFF);
            if (hex.length() == 1) {
                hexString.append('0');  // 如果只有一位，前面补零
            }
            hexString.append(hex);
        }
        return hexString.toString();
    }

    public static void main(String[] args) {
        byte[] bArr = {48, 57, 55, 49, 101, 99, 102, 53, 57, 100, 97, 57, 100, 97, 53, 55, 101, 54, 97, 51, 102, 55, 100, 51, 52, 55, 50, 98, 98, 100, 55, 54};
        String str = "541a3a5896fbefd351917c8251328a236a7efbf27d0fad8283ef59ef07aa386dbb2b1fcbba167135d575877ba0205a02f0aac2d31957bc7f028ed5888d4bbe69ed6768efc15ab703dc0f406b301845a0a64cf3c427c82870053bd7ba6721649c3a9aca8c3c31710a6be5ce71e4686842732d9314d6898cc3fdca075db46d1ccf3a7f9b20615f4a303c5235bd02c5cdc791eb123b9d9f7e72e954de3bcbf7d314064a1eced78d13679d040dd4080640d18c37bbde";
        byte[] bArr2 = {102, 48, 53, 53, 49, 56, 53, 54, 97, 97, 53, 55, 53, 102, 97, 97};
        byte[] result = m190074a(bArr, bArr2);
        System.out.println(bytesToHex(result));

        byte[] a = {-117, -115, -128, -119, 33, 40, 34, -127, -115, 35, 41, -115, 35, 41, -127, -128, 33, -126, 41, -120, 34, -128, 35, -120, -125, -128, -118, 42, 42, 35, -128, -126};
        System.out.println(bytesToHex(a));


        String res_hex2 = "0f02c75267dd7becc6b32f941837721f6f89610d4c49c3b5a8ddd649767e953de0a02e505b8e684fb5654137c266f12e";
        byte[] bytes2 = DatatypeConverter.parseHexBinary(res_hex2);
        byte[] bytes3 = m190073b(bytes2);
        System.out.println(bytesToHex(bytes3));

        //byte[] right_byte = {15,1,-53,-95,-101,-18,-73,-36,-55,115,31,104,36,59,-79,47,-97,70,-110,14,-116,-122,-61,122,84,-18,-23,-122,-71,-67,106,62,-48,80,29,-96,-89,77,-108,-113,122,-102,-126,59,-63,-103,-14,29};
        //System.out.println(bytesToHex(right_byte));
    }
}
